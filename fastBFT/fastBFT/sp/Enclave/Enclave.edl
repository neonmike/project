/* Enclave.edl - Top EDL file. */

enclave {
    
    include "user_types.h" /* buffer_t */
    include "unistd.h"
    include "stdlib.h"
    include "sgx_tcrypto.h"
    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    trusted {
        //Init public key and ki
        public void Init([in,out,size=pk_size]sgx_aes_ctr_128bit_key_t *p_key1,[out,size=pub_size]sgx_ec256_public_t *pout_public,size_t pk_size,size_t pub_size);
        //preprocessing phase
        public void preprocessing([out,size=p_size]sgx_ec256_signature_t *p_sg, [out,size=en_size]uint8_t *en_s,size_t p_size,size_t en_size);
        //call decrypt
        //public void sac_decrypt([in,size=en_size]unsigned char *ensecret,[out,size=de_size]unsigned char *desecret,size_t en_size,size_t de_size,int k);
        //request_counter
        public void request_counter([in,size=32]uint8_t *hm,[out,size=64]sgx_ec256_signature_t *sprc_signature);
        //verify_shares
        public int verify_shares([in,size=shares_size]unsigned char *shares,size_t shares_size,int m);
        //get secrets
        public void get_secrets([out,size=32]uint8_t *dsecrets,[out,size=64]uint8_t *dhcs,size_t mnum);
        public void save_key([in,size=80]uint8_t *key);
         //public void verify_counter([in,out,size=64]sgx_ec256_signature_t *sprc_signature,[in,size=128]uint8_t *ensecrets,[in,size=32]uint8_t *hm,[out,size=16]uint8_t *sci,[out,size=30]uint8_t *result,[out,size=32]uint8_t *hc1);
         //public void update_counter([in,size=16]uint8_t *sc,[in,size=64]sgx_ec256_signature_t *up_signature,[in,size=32]uint8_t *hc1,[out,size=35]uint8_t *result);
         public int get_c();
         public int get_v();
         public void go_back();
        };
        
        
    untrusted {
        void ocall_print_string([in, string] const char *str);
       
    };

};
